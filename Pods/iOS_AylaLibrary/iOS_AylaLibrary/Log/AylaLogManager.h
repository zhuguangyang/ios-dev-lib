//
//  AylaLog.h
//  iOS_AylaLibrary
//
//  Created by Yipei Wang on 7/23/15.
//  Copyright (c) 2015 Ayla Networks. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "AylaLog.h"

typedef NS_ENUM(uint16_t, AylaSystemLoggingLevel) {
    
    /** Disable loggings */
    AylaSystemLoggingNone = 0x00,
    
    /** Only log errors */
    AylaSystemLoggingError = 0x01,
    
    /** Log warnings, errors */
    AylaSystemLoggingWarning = 0x03,
    
    /** Log infos, warnings, errors */
    AylaSystemLoggingInfo = 0x07,
    
    /** Log debug, infos, warnings, errors */
    AylaSystemLoggingDebug = 0x0f,
    
    /** Log verbose, debug, infos, warnings, errors */
    AylaSystemLoggingVerbose = 0x1f,
    
    /** Log all messages */
    AylaSystemLoggingAll = 0xff,
};

typedef NS_OPTIONS(uint8_t, AylaSystemLoggingOutput) {
    
    /** Option to print log messages in console */
    AylaSystemLoggingOutputConsole      = 1 << 0,
    
    /** Option to write log messages into log files */
    AylaSystemLoggingOutputLogFile      = 1 << 1,
    
    /** Option to send log messages to app registered loggers  */
    AylaSystemLoggingOutputAppLoggers   = 1 << 3
};

NS_ASSUME_NONNULL_BEGIN

@class AylaLogMessage;

/**
 *  Ayla Log Manager provides management to library's logging mechanism.
 *  By default, log messages generated by library will be sent to log files and console. Applications can also generate their own loggers and register them to log manager. After that, if AylaSystemLoggingOutputAppLoggers has also been enabled, log message will also be passed into application loggers
 *  Log manager also provides a method to let application add their own logs to library's logging mechanism. A well-recognized tag is highly recommanded for application logs so that it could be easily distinguished.
 */
@interface AylaLogManager : NSObject

/** Current logging level */
@property (nonatomic, readonly, assign) AylaSystemLoggingLevel loggingLevel;

/** Current enabled logging outputs */
@property (nonatomic, readonly, assign) AylaSystemLoggingOutput loggingOutputs;

/**
 *  Shared log manager
 */
+ (instancetype)sharedManager;

/**
 *  Use this method to update logging levels.
 *  @param loggingLevel New logging level to be updated to.
 */
- (void)updateLoggingLevel:(AylaSystemLoggingLevel)loggingLevel;

/**
 *  Use this method to update logging outputs.
 *  @param loggingOutputs New logging outputs to be updated to. Set to be AylaSystemLoggingOutputConsole|AylaSystemLoggingOutputLogFile by default.
 */
- (void)updateLoggingOutputs:(AylaSystemLoggingOutput)loggingOutputs;

/**
 *  Array of application-added loggers.
 *  @return An array of loggers.
 */
- (NSArray *)loggers;

/**
 *  Use this method to register loggers to log manager.
 *  @param logger The logger which will be added to library
 *  @param key A unique key for given logger. If this key has been used to another logger, this request will replace the former logger with the new one.
 */
- (void)addLogger:(id<AylaLoggerProtocol>)logger withKey:(NSString *)key;

/**
 *  Use this method to remove a logger from log manager.
 *  @param key The key of the logger.
 */
- (void)removeLoggerWithKey:(NSString *)key;

/**
 *  Use this method to add a new log message.
 *  @param tag Tag of log message.
 *  @param level Logging level of log message.
 *  @param flag Flag of log message.
 *  @param time Timestamp of log message. If this param is set to be nil, library will use [NSDate data] to create a timestamp for this messsage.
 *  @param fmt Format of message contents.
 */
- (void)log:(NSString *)tag
      level:(AML_LOGGING_LEVEL)level
       flag:(NSInteger)flag
       time:(NSDate * __nullable)time
        fmt:(NSString *)fmt, ... NS_FORMAT_FUNCTION(5, 6);

@end

NS_ASSUME_NONNULL_END